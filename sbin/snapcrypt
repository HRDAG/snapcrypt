#! /usr/bin/env bash

# the other commands will eventually be subsumed into this command

# search for '####' in libsnap.sh to see environment and coding conventions
source libsnap.sh || exit 1
# We use these constants from libsnap.sh (and change $our_name)
readonly our_path
# We use libsnap.sh variables: file_for_logging log_msg_prefix
# We use these functions from libsnap.sh
readonly -f abort abort-function abort-with-action-Usage
readonly -f set-FS_label--from-mount_dir set-FS_type--from-path
readonly -f merged-continuation-lines need-cmds

function set-config_file() {
	local package=$1

	local dir
	for dir in ~/etc /usr/local/etc /etc
	    do	config_file=$dir/$package/configure.sh
		[[ -s $config_file ]] && return 0
	done
	return 1
}

set-config_file $our_name || warn "can't find our (non-empty) configure.sh"
readonly config_dir=$(dirname  $config_file)
if source $config_file
   then [[ -s $udev_rules_file ]] || abort "need non-empty $udev_rules_file"
   else warn "couldn't source $config_file, use -k with 'open'"
fi

# common_mount_options, extN_mount_options, xfs_mount_options, drive_dir_prefix
set-config_file snapback && source $config_file

# udev may not provide much of a PATH: https://unix.stackexchange.com/a/99073
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

Usage="\
Usage: $our_name [options] action [args]

  Current actions are:

     list-drives: show all encrypted drives.

     status { name(s) | 'all' }: show detailed status of encrypted drive(s).

     init [-s sector-size] name device: setup encryption. -s defaults to 4KB;
        find the device with: ls -lt /dev/sd[a-z]*

     rule name device: print a udevd rule to use to call this command.

     open [-r|-M] {name | mount [device] | all}: decrypt & mount device,
	specifying a name (e.g. FS_label) or mount-dir; then mount
	the decrypted mapping device.  If mount is not an absolute path,
	call 'snapback' to get the mount-dir.  [This action is run from
	a udev rule in $udev_rules_file .]
	Use -r to mount readonly, or -M to not mount.
	Use -k if you don't have $config_file

     close [-f] {mapping|mount|max}: unmap drive (cryptsetup close) & detach.
         If mount is not an absolute path, call 'snapback' to figure out
	    what to do (if 'max' or 'all', choose busiest backup).
	 Use -f to close even without any good snapshots (e.g. maintenance).
	 'eject' is a synonym for 'close'.

     map {name|mount [device] | all}: decrypt device (i.e. setup mapping) only

     unmap [-f] {mapping|mount|max}: like 'close', but don't detach.

     Common options:
	-d: Debug shell script (don't run commands, just show them): simulation
	-t: Trace shell script (show commands as they execute)
	-h: show this Help message
"

IfRun= Trace= trace_opt= debug_opt=
our_opts=
while getopts "d t hk" arg
    do	our_opts+="-$arg ${OPTARG-} "
	case $arg in
	   ( d ) IfRun=echo     debug_opt=-d ;; # $IfRun prevents side-effects
	   ( t ) Trace="set -x" trace_opt=-t ;;
	   (h|k) print-or-egrep-Usage-then-exit "$@" ;;
	   ( * ) abort "$Usage" ;;
	esac
done
let OPTIND=$OPTIND-1
shift $OPTIND
unset arg

readonly tmp=$tmp_dir/$our_name-$$

[[ $Trace && $debug_opt ]] && IfRun=:

need-cmds cryptsetup fuser

##############################################################################
# functions
##############################################################################

function set-serial_number() {
	local physical_dev=${1%%[0-9]*}

	serial_number=$(udevadm info $physical_dev |
			    sed -n 's/.*SERIAL_SHORT=//p')
	[[ $serial_number ]]
}

# ----------------------

if [[ ${drive_dir_prefix-} ]]
   then set-FS_label--from-mount_dir ${drive_dir_prefix-} # have snapback?
	readonly FS_label_prefix=$FS_label
fi

function set-FS_label--from-LUKS-header() {
	local physical_dev=$1

	set -- $(sudo cryptsetup luksDump $physical_dev 2>/dev/null |
		     grep '^Label:')
	[[ $# == 0 ]] && FS_label= && return 1
	FS_label=${!#}
}

# ----------------------

function set-FS_label--from-lsblk() {
	local physical_dev=$1

	FS_label=
	have-cmd lsblk || return 1
	set -- $(lsblk --list --output name,type $physical_dev |
		     egrep '^[^ ]+ +crypt$')
	[[ $# != 0 ]] || return 1
	FS_label=$1
}

# ----------------------

declare -A FS_label2physical_dev

set-FS_label2physical_dev--as-list-drives() {

	local physical_dev FS_label serial_number
	for physical_dev in /dev/sd[a-z]*
	    do	[[ -b $physical_dev ]] || continue

		sudo cryptsetup isLuks $physical_dev || continue

		set-FS_label--from-LUKS-header $physical_dev ||
		set-FS_label--from-lsblk       $physical_dev ||
		set-serial_number $physical_dev ||
		    { echo "? $physical_dev"; continue; }

		if [[ ! $FS_label ]]
		   then set -- $(merged-continuation-lines $udev_rules_file |
				     sed -n "/\b$serial_number\b/s/%k.*//p")
			[[ $# != 0 ]] || { echo "? $physical_dev"; continue; }
			local drive=${!#}
		   else local drive=${FS_label#$FS_label_prefix}
		fi

		if [[ $drive == /* ]]
		   then local mount_dir=$drive
		   else local mount_dir=${drive_dir_prefix-}$drive
		fi
		[[ $FS_label ]] ||
		set-FS_label--from-mount_dir $mount_dir
		local dev=/dev/mapper/$FS_label   path_msg=   dm=
		if [[ -b $dev ]]
		   then [[ -L $dev ]] && set-absolute_path $dev &&
			    path_msg=" -> $absolute_path"
			dm="\t# mapped device is $dev$path_msg"
		fi

		echo -e "$drive $physical_dev$dm"

		FS_label2physical_dev[$FS_label]=$physical_dev
	done > $tmp && sort $tmp
	rm -f  $tmp

	FS_label2physical_dev['?']=	# make sure it's set
}

# ---------------------------------

function set-device--from-FS_label() {
	local FS_label=$(basename $1)

	is-set FS_label2physical_dev ||
	   set-FS_label2physical_dev--as-list-drives &> /dev/null
	device=${FS_label2physical_dev[$FS_label]-}
	[[ $device ]]
}

# ----------------------------------------------------------------------------
# functions for action 'rule'
# ----------------------------------------------------------------------------

readonly rule_format='
# udev puts the basename of the physical-device (which matched KERNEL) into %%k
ACTION=="add", KERNEL=="sd*[!0-9]", ATTRS{serial}=="%s", \
   RUN+="/usr/local/sbin/snapcrypt -t open %s %%k &"'

print-rule() {
	local name=$1 device=$2

	set-serial_number $device
	local rule
	printf -v rule "$rule_format" "$serial_number" $name
	echo "$rule"
}


# ----------------------------------------------------------------------------
# funcctions for action 'init'
# ----------------------------------------------------------------------------

init-device() {
	local name=$1 device=$2

	set-mount_dir-FS_label--from-name -i $name
	set-physical_device -i $device
	device=$physical_device

	fuser -m -v $device && $IfRun abort "$device is in-use"
	[[ -s $drive_key_file ]] || abort "must create $drive_key_file"

	warn "encrypting $device\n\n   be SURE you type 'YES' not 'yes' ..."
	local \
	LUKS2_opts="--type luks2 --sector-size $sector_size --label $FS_label"
	$IfRun sudo cryptsetup luksFormat $LUKS2_opts $device $drive_key_file||
	    abort-function "cryptsetup returned $?; maybe repeat, after run:
		sudo cryptsetup close $FS_label"

	set-decrypted_device--as-open $FS_label $physical_device; echo
	set-FS_label2physical_dev--as-list-drives | fgrep -w $physical_device
	warn "decrypted $device, so you can now run: snapback mkfs $FS_label"

	set-serial_number $device ||abort "add rule to $udev_rules_file for $*"
	echo
	if grep -A1 "\b$serial_number\b" $udev_rules_file
	   then warn "$udev_rules_file already has the above rule"
	   else print-rule $name $device | tee -a $udev_rules_file ||
		   abort "couldn't append the above rule to $udev_rules_file"
		echo -e "\nAdded the above rule to $udev_rules_file"
	fi

	local  rules_symlink=/etc/udev/rules.d/USB-backup-drives.rules
	[[ -e $rules_symlink ]] ||
	    ln -v -s ../../${config_dir##*/}/drives.rules $rules_symlink
}

# ----------------------------------------------------------------------------
# functions for action 'open'
# ----------------------------------------------------------------------------

open-all-unopened-drives() {

	local name encrypted_dev pound mapped device is mapped_dev
	$our_path list-drives |
	while read name encrypted_dev pound mapped device is mapped_dev junk
	   do	is-an-FS-device-mounted "$map_dev" && continue
		$_our_name $our_opts open $name $encrypted_dev
	done
}

# ------------------------------------------------------------------

set-mount_dir-FS_label--from-device() {
	local device=$1

	if [[ $device == /dev/mapper/* ]]
	   then FS_label=$(basename $device)
	   else	set-FS_label--from-LUKS-header $device
	fi &&
	set-mount_dir--from-FS-label $FS_label &&
	    return

	for device in $device*
	    do	[[ -b $device ]] || continue
		sudo cryptsetup isLuks $device || continue
		set-mount_dir-FS_label--from-device $device
		return
	done

	abort "can't figure out FS_label from $device"
}

# ----------------------

set-mount_dir-FS_label--from-name() {
	[[ $1 == -i ]] && { shift; local is_init=$true; } || local is_init=
	local name=$1

	[[ $name && $name != '?' ]] || abort "name has to exist"

	if [[ $name == /dev/* ]]
	   then [[ ! $is_init ]] || abort "need real name, mot device $device"
		set-mount_dir-FS_label--from-device $name
		return
	fi

	if [[ $name == /* ]]
	   then mount_dir=$name
	   else mount_dir=$(snapback drive $name 2>/dev/null) ||
		   abort "'$name' is not a valid drive name"
	fi
	if [[ $mount_dir ]]
	   then set-FS_label--from-mount_dir $mount_dir
	   else FS_label=$name
	fi
}

# ---------------------------------

set-physical_device() {
	[[ $1 == -i ]] && { shift; local is_init=$true; } || local is_init=
	local device=$1

	local dir
	[[ $device == /* ]] ||
	for dir in /dev /dev/mapper
	    do	[[ -b  $dir/$device ]] || continue
		device=$dir/$device
		break
	done
	if [[ $device == /dev/mapper/* ]]
	   then [[ ! $is_init ]] &&
		set-device--from-FS_label $device &&
		   physical_device=$device && return
		abort-function "$device is mapping, not physical drive"
	fi
	[[ $device == /* ]] || abort "can't find block device $device"

	if [[ $is_init ]]
	   then [[ -b $device ]] || abort "device $device doesn't exist"
		physical_device=$device
		return
	fi

	physical_device=
	for device in $device*
	    do	[[ -b $device ]] || continue
		sudo cryptsetup isLuks $device || continue
		physical_device=$device
		return
	done

	abort "encrypted device $1 doesn't exist"
}

# ---------------------------------

setup-vars-for-log-and-abort() {

	file_for_logging=$log_dir/$FS_label.log
	log_msg_prefix=' $physical_device'

	[[ -t 0 || -t 1 || -t 2 || ${HOME-} ]] || exec 2> $file_for_logging
}

# ---------------------------------

set-decrypted_device--as-open() {
	local FS_label=$1 physical_device=$2

	decrypted_device=/dev/mapper/$FS_label

	[[ -b $decrypted_device ]] ||
	$IfRun sudo cryptsetup open \
	   --key-file $drive_key_file --type luks $physical_device $FS_label ||
		abort "'cryptsetup open' failed, status=$?; check syslog, and see D. in snapback's doc/Install.txt"

	[[ -b $decrypted_device ]] || $IfRun \
	    abort "opened encrypted device, but can't find $decrypted_device"
}

# ---------------------------------

set-log_device-mount_options() {
	local FS_type=$1

	log_device=
	mount_options=${common_mount_options:-nosuid,nodev,noatime}

	local FS_opts=		   # grab opts from /etc/snapback/configure.sh
	case $FS_type in
	    ( ext[1-3] ) FS_opts=${extN_mount_options-} ;;
	    ( ext[4-9] ) FS_opts=${extN_mount_options:-journal_checksum} ;;
	    ( xfs )	 FS_opts=${xfs_mount_options:-logbsize=256k}
			 set -- /dev/mapper/*${FS_label}_log
			 [[ -b $1 ]] && log_device=$1 FS_opts+=",logdev=$1" ;;
	    ( * ) abort "don't know how to mount filesystem of type '$FS_type'"
	esac
	[[ $FS_opts ]] && mount_options+=",$FS_opts"
}

# ---------------------------------

open() {
	local name=$1 device=${2-}

	set-mount_dir-FS_label--from-name $name
	[[ $name == /dev/[^m]* && ! $device ]] && device=$name
	local map=/dev/mapper/$FS_label
	[[ $device ]] || set-device--from-FS_label $FS_label ||
	    abort "can't find device for label '$FS_label':\n$(ls -l $map)"
	set-physical_device $device

	is-an-FS-device-mounted $mount_dir && abort "$mount_dir has an FS"

	setup-vars-for-log-and-abort

	set-decrypted_device--as-open $FS_label $physical_device
	[[ -t 1 ]] &&
	set-FS_label2physical_dev--as-list-drives | fgrep -w $physical_device

	[[ $do_mount ]] || return 0

	RunCmd sudo mkdir -p $mount_dir

	set-FS_type--from-path $decrypted_device
	set-log_device-mount_options $FS_type

	while [[ $log_device && ! -b $log_device ]]
	   do	[[ -t 1 ]] && echo "Waiting for log $log_device to appear"
		sleep 1
	done
	[[ $do_mount_RO ]] && mount_options+=,ro
	RunCmd sudo \
	mount -t $FS_type -o $mount_options $decrypted_device $mount_dir ||
	    return 1

	[[ -t 1 ]] || return 0
	echo
	local df_fields=source,fstype,size,avail,used,pcent,iused,ipcent,target
	df --block-size=G --output=$df_fields --no-sync $mount_dir
}

# ----------------------------------------------------------------------------
# funcctions for action 'close'
# ----------------------------------------------------------------------------

close-all-opened-drives() {
	
	[[ ${drive_dir_prefix-} ]] || 
	    abort-function "only works when using snapback"

	df --output=target --no-sync -x devtmpfs -x tmpfs |
	   grep "^$drive_dir_prefix" |
	while read mount_point
	   do	$_our_name $our_opts close -q $mount_point
	done
}

# ----------------------------------------------------------------------------

set-mount_dir-mapped_dev-FS_label() {
	local name=$1

	mount_dir=  mapped_dev=
	case $name in
	    ( /dev/* ) set-mount_dir-FS_label--from-device $name ;;
	    ( /*     ) mount_dir=$name ;;
	    ( max    ) mount_dir=$(snapback max-drive) ;;
	    (  *     )
		mapped_dev=/dev/mapper/$name
		if [[ ! -b $mapped_dev ]]
		   then mapped_dev=
			mount_dir=$(snapback drive $name) ||
			    abort "'$name' is not a valid drive name"
		fi ;;
	esac

	[[ $mount_dir || $mapped_dev ]] ||
	    abort "can't find encrypted mapping or mount for '$name'"

	if [[ $mount_dir ]]
	   then set-FS_label--from-mount_dir $mount_dir
		mapped_dev=/dev/mapper/$FS_label
	   else set-mount_dir--from-FS-label $name
	fi
	[[ $mount_dir && $mapped_dev ]] || abort-function "logic error"

	[[ $FS_label ]] ||
	if [[ $mapped_dev ]]
	   then     FS_label=$(basename $mapped_dev)
	   else set-FS_label--from-mount_dir $mount_dir
	fi
}

# ---------------------------------

assert-drive-has-new-backups() {
	local mount_dir=$1

	[[ $mount_dir ]] || return 1

	[[ ${do_force-} || ! $(which snapback) ]] ||
	snapback has-new-snapshots $mount_dir && return

	warn "use -f to force a close"
	exit 1
}

# ---------------------------------
	
unmount-drive() {
	local mount_dir=$1

	[[ -d $mount_dir ]] || return
	echo "unmounting $mount_dir, can take minutes ..."

	[[ $debug_opt ]] ||
	    { snapback $our_opts umount $mount_dir && return; }

	is-an-FS-device-mounted $mount_dir || return

	$IfRun sudo umount $mount_dir
	local status=$?
	if [[ $status != 0 ]]
	   then echo -e "\numount failed with status=$status"
		cmd="fuser -mv $mount_dir |& sort -k4"
		echo -e "\n==> $cmd <==\n"
		eval "sudo $cmd" | fgrep -v -e ' kernel mount '
		echo -e "\nTo kill processes: sudo fuser -k -9 -M $mount_dir\n"
		exit $status
	fi
}

# ----------------------

function set-physical_device--from-FS_label() {
	local label=$1

	set -- $(sudo cryptsetup status $1 | grep '^ *device:')
	physical_device=${!#}
	[[ $physical_device ]]
}

# ---------------------------------

unmap-drive() {
	local name=$1

	echo "unmapping name=$name ..."
	RunCmd sudo cryptsetup close $name && echo "Success!"
}

# ---------------------------------

park-disk-heads() {
	[[ -b $1 ]] || abort-function "$1 is not a block device"
	local physical_device=$(basename $1)

	physical_device=${physical_device%%[0-9]*}
	$IfRun \
	sudo bash -c "echo 1 > /sys/block/$physical_device/device/delete"
}

# ----------------------

alert-smartd() {

	$IfRun sudo killall -1 smartd 2> /dev/null # so it notices lost drive
}

# ---------------------------------

close() {
	[[ $1 == -q ]] && { local is_quiet=$true; shift; } || local is_quiet=

	set-mount_dir-mapped_dev-FS_label $1

	setup-vars-for-log-and-abort

	assert-drive-has-new-backups $mount_dir

	unmount-drive $mount_dir

	set-physical_device--from-FS_label $FS_label
	unmap-drive $FS_label

	[[ $action == close && $physical_device ]] || return

	park-disk-heads $physical_device && alert-smartd
}

# ----------------------------------------------------------------------------

show-status() {

	[[ $* == all ]] &&
	    set -- $(set-FS_label2physical_dev--as-list-drives | sed 's/ .*//')

	local name
	for name
	    do	[[ $name == '?' ]] && continue
		set-mount_dir-FS_label--from-name $name
		header $name
		sudo cryptsetup status $FS_label
	done
}

##############################################################################
# main
##############################################################################

[[ $# != 0 ]] || abort "specify an action to perform\n$Usage"

action=$1; shift
_our_name="$our_name"
 our_name="$our_name $action"
undo-action-abbrev() { action=$1 our_name="$_our_name $1" ; }

# ---------------------------------

process-action() {

stack_frame_to_show=0		# show line-number inside the 'case' statement

$Trace

case $action in
   # list-drives: show all encrypted drives.
   ( l*s* ) undo-action-abbrev list-drives # ls
	set-FS_label2physical_dev--as-list-drives "$@"
	;;
   # status { name(s) | 'all' }: show detailed status of encrypted drive(s).
   ( s* ) undo-action-abbrev status
	[[ $# != 0 ]] || abort-with-action-Usage
	show-status "$@"
	;;
   # init name device: setup encryption (find device with: ls -lt /dev/sd*)-
   ( init )
	[[ $1 == -s ]] && { sector_size=$2; shift 2; } || sector_size=4096
	[[ $# == 2 ]] || abort-with-action-Usage
	init-device "$@"
	;;
   # rule name device: print a udevd rule to use to call this command.
   ( r* | p*r* ) undo-action-abbrev rule
	[[ $# == 2 ]] || abort-with-action-Usage
	print-rule "$@"
	;;
    # map {name|mount [device] | all}: decrypt device (i.e. setup mapping) only
    ( m* ) undo-action-abbrev map
	set -- -M "$@"
	;&				# fall through to open ...
    # open [-r|-M] {name | mount [device] | all}: decrypt & mount device.
    ( o* ) [[ $action == o* ]] && undo-action-abbrev open # map falls through
	[[ ${1-} = -r ]] && { shift; do_mount_RO=$true; } || do_mount_RO=$false
	[[ ${1-} = -M ]] && { shift; do_mount=$false  ; } || do_mount=$true
	[[ ${1-} = -k ]] && { drive_key_file=$2; shift 2; }
	[[ ${drive_key_file-} ]] || abort "need -k"
	if [[ $* == all ]]
	   then open-all-unopened-drives
	elif [[ $# == [12] ]]
	   then open "$@"
	   else abort-with-action-Usage
	fi
	;;
    # close [-f] {mapping|mount|max}: unmap drive (cryptsetup close) & detach.
    # unmap [-f] {mapping|mount|max}: like 'close', but don't detach.
    ( c* | u* )
	if [[ $action == c* ]]
	   then undo-action-abbrev close
	   else undo-action-abbrev unmap
	fi
	[[ ${1-} == -f ]] && { shift; do_force=$true; } || do_force=$false
	if [[ $* == all ]]
	   then close-all-opened-drives
	elif [[ $# == [12] ]]
	   then close "$@"
	   else abort-with-action-Usage
	fi
	;;
   ( * )
	warn "'$action' is not a recognized action, run: $_our_name -h"; exit 1
	;;
esac
}

process-action "$@"
