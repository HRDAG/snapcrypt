#! /usr/bin/env bash

# to initially encrypt a new backup drive, see the comment at the top
#   of the 'mkfs' action in snapback

# =============================================================================

# libsnap.sh has these funcs/vars: our_name, abort,
# set_FS_label___from_mount_dir, set_FS_type___from_path
#
# search for '####' in libsnap.sh to see environment and coding conventions
source libsnap.sh || exit 1

source /etc/snapcrypt/configure.sh || abort "missing configure.sh"

# this sets common_mount_options, extN_mount_options, xfs_mount_options
source  /etc/snapback/configure.sh &> /dev/null # optional

# udev may not provide much of a PATH: https://unix.stackexchange.com/a/99073
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

Usage="\
Usage: $our_name device mount-point
   Run 'cryptsetup open' on device, using FS_label (derived from mount-point)
      as name; then mount decrypted device.  If mount-point is not
      an absolute path, call 'snapback' to get the mount-point.
   This script is called from a udev rule in /etc/snapcrypt/drives.rules .

     Common options:
	-d: Debug shell script (don't run commands, just show them): simulation
	-t: Trace shell script (show commands as they execute)
	-h: show this Help message"

IfRun= Trace= trace_opt= debug_opt=
while getopts "dth" arg
    do  case $arg in
	   ( d ) IfRun=echo     debug_opt=-d ;; # $IfRun prevents side-effects
	   ( t ) Trace="set -x" trace_opt=-t ;;
	   ( h ) echo  "$Usage"; exit 0 ;;
	   ( * ) abort "$Usage" ;;
	esac
done
let OPTIND=$OPTIND-1
shift $OPTIND
unset arg

[[ -n $Trace && -n $IfRun ]] && IfRun=:

# =============================================================================

[[ $# == 2 ]] || abort "$Usage"
raw_device=$1  mount_dir=$2

# -----------------------------------------------------------------------------

[[ $mount_dir == /* ]] || mount_dir=$(snapback drive $mount_dir)
[[ $mount_dir ]] || exit 1

set_FS_label___from_mount_dir $mount_dir

file_for_logging=$log_dir/$FS_label.log

[[ $raw_device == /dev/* ]] || raw_device=/dev/$raw_device
[[ -b $raw_device ]] || abort "$raw_device is not a block device"

log_msg_prefix=' $raw_device'

# -----------------------------------------------------------------------------

$Trace

decrypted_device=/dev/mapper/$FS_label
[[ -b $decrypted_device ]] ||
$IfRun sudo cryptsetup open \
   --key-file $drive_key_file --type luks $raw_device $FS_label ||
	abort "'cryptsetup open' failed, status=$?"
[[ -b $decrypted_device ]] ||
    abort "opened encrypted device, but can't find $decrypted_device"

$IfRun sudo mkdir -p $mount_dir

set_FS_type___from_path $decrypted_device

mount_options=${common_mount_options:-nosuid,nodev,relatime,nodiratime}
case $FS_type in
    ( ext[1-3] )
	[[ $extN_mount_options ]] &&
	mount_options=$mount_options,$extN_mount_options ;;
    ( ext[4-9] )
	mount_options=$mount_options,${extN_mount_options:-journal_checksum} ;;
    ( xfs )
	mount_options=$mount_options,${xfs_mount_options:-logbsize=256k}
	set -- /dev/mapper/*${FS_label}_log
	[[ -b $1 ]] && mount_options=$mount_options,logdev=$1 ;;
    ( * ) abort "don't know how to mount filesystem of type '$FS_type'"
esac
cmd="
$IfRun sudo mount -t $FS_type -o $mount_options $decrypted_device $mount_dir"
$cmd || abort "'$cmd' returned $?"
